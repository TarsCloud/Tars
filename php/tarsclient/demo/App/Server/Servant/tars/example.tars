module example
{
// servantName: test.test.example
/**
     * 手机短信类型
     */
    enum EnumType {
        ONE = 0,               //1
        TWO = 1,                  //2
        THREE = 2,         //3
        FOUR = 3,        //4
    };

    /**
     * 标准的结构,简单的类型
     */
    struct SimpleStruct
    {0 require long id;
        1 require EnumType count;
        2 optional short page =1; /*haha { test notation here }*/
    };

        // 测试注释 Struct With simple map and vector
            struct MiddleStruct
            {
               0 require long id;                     //Id
               14 require string ip;                   //用户Ip
               15 require map<string,string> deviceUid;              //客户端设备唯一标识
               17 optional vector<long> createTime;             //创建时间
            };

    // 返回书签列表结构体
struct NestedStruct{
            0 require int code;                                 //简单类型
            1 require SimpleStruct nestedStruct;                      //嵌套struct
            2 require vector<SimpleStruct> structList;    //vector夹带struct
            3 require map<string,SimpleStruct> structMap;                          //map夹带struct
            9 optional map<string, vector<SimpleStruct>> ext;                       /*map夹带vector夹带struct{xxx}*/

        };


interface servant {

// 测试方法
        string ping();
/**
         * 单个输入参数
         */
        int singleParam(string in1, out double out1);

   long inAndOut1(map<string,  vector<SimpleStruct>> param1, map<string,string> param2,out map <string,  vector<MiddleStruct>> out1,out short out2,out vector<vector<SimpleStruct>> out3);// 测试的注释


        /**
         * 根据作家userId获取作家信息
         * userId: 作家userId
         */
   void inAndOut2(SimpleStruct param1,String param2, EnumType param3 , out NestedStruct out1,out vector<SimpleStruct> out2,out vector<map<long,long>> out3, out vector<int> out4,);//不错

    };

}