/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.qq.tars.support.config.prx;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;

/**
 * config obj to load server's system config.
 **/
@Servant
public interface ConfigPrx {
	/**
	 * 读取配置文件列表
	 * @param app, app name
	 * @param server, server name
	 * @param vf, config file name
	 **/
	public int ListConfig(String app, String server, @TarsHolder Holder<java.util.List<String>> vf);
	/**
	 * 读取配置文件列表
	 * @param app, app name
	 * @param server, server name
	 * @param vf, config file name
	 **/
	public int ListConfig(String app, String server, @TarsHolder Holder<java.util.List<String>> vf, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取配置文件列表
	 * @param app, app name
	 * @param server, server name
	 * @param vf, config file name
	 **/
	public void async_ListConfig(@TarsCallback ConfigPrxCallback callback, String app, String server);
	/**
	 * 读取配置文件列表
	 * @param app, app name
	 * @param server, server name
	 * @param vf, config file name
	 **/
	public void async_ListConfig(@TarsCallback ConfigPrxCallback callback, String app, String server, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取配置文件
	 * @param app, app name
	 * @param server, server name
	 * @param filename, config file name
	 * @param config, 配置文件内容
	 **/
	public int loadConfig(String app, String server, String filename, @TarsHolder Holder<String> config);
	/**
	 * 读取配置文件
	 * @param app, app name
	 * @param server, server name
	 * @param filename, config file name
	 * @param config, 配置文件内容
	 **/
	public int loadConfig(String app, String server, String filename, @TarsHolder Holder<String> config, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取配置文件
	 * @param app, app name
	 * @param server, server name
	 * @param filename, config file name
	 * @param config, 配置文件内容
	 **/
	public void async_loadConfig(@TarsCallback ConfigPrxCallback callback, String app, String server, String filename);
	/**
	 * 读取配置文件
	 * @param app, app name
	 * @param server, server name
	 * @param filename, config file name
	 * @param config, 配置文件内容
	 **/
	public void async_loadConfig(@TarsCallback ConfigPrxCallback callback, String app, String server, String filename, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 根据host读取文件
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param config, 配置文件内容
	 **/
	public int loadConfigByHost(String appServerName, String filename, String host, @TarsHolder Holder<String> config);
	/**
	 * 根据host读取文件
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param config, 配置文件内容
	 **/
	public int loadConfigByHost(String appServerName, String filename, String host, @TarsHolder Holder<String> config, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 根据host读取文件
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param config, 配置文件内容
	 **/
	public void async_loadConfigByHost(@TarsCallback ConfigPrxCallback callback, String appServerName, String filename, String host);
	/**
	 * 根据host读取文件
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param config, 配置文件内容
	 **/
	public void async_loadConfigByHost(@TarsCallback ConfigPrxCallback callback, String appServerName, String filename, String host, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 检查配置文件是否服务TC_Config格式
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public int checkConfig(String appServerName, String filename, String host, @TarsHolder Holder<String> result);
	/**
	 * 检查配置文件是否服务TC_Config格式
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public int checkConfig(String appServerName, String filename, String host, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 检查配置文件是否服务TC_Config格式
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public void async_checkConfig(@TarsCallback ConfigPrxCallback callback, String appServerName, String filename, String host);
	/**
	 * 检查配置文件是否服务TC_Config格式
	 * @param appSerever, app.server
	 * @param filename, config file name
	 * @param host, ip
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public void async_checkConfig(@TarsCallback ConfigPrxCallback callback, String appServerName, String filename, String host, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取服务所在节点的配置文件列表
	 * 
	 * @param configInfo, ConfigInfo 配置文件信息，如果没有set分组信息，请设置setdivision为空""
	 * @param vf, config file name
	 * @return int 0: 成功, -1:失败
	 **/
	public int ListConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<java.util.List<String>> vf);
	/**
	 * 读取服务所在节点的配置文件列表
	 * 
	 * @param configInfo, ConfigInfo 配置文件信息，如果没有set分组信息，请设置setdivision为空""
	 * @param vf, config file name
	 * @return int 0: 成功, -1:失败
	 **/
	public int ListConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<java.util.List<String>> vf, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取服务所在节点的配置文件列表
	 * 
	 * @param configInfo, ConfigInfo 配置文件信息，如果没有set分组信息，请设置setdivision为空""
	 * @param vf, config file name
	 * @return int 0: 成功, -1:失败
	 **/
	public void async_ListConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo);
	/**
	 * 读取服务所在节点的配置文件列表
	 * 
	 * @param configInfo, ConfigInfo 配置文件信息，如果没有set分组信息，请设置setdivision为空""
	 * @param vf, config file name
	 * @return int 0: 成功, -1:失败
	 **/
	public void async_ListConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取配置文件
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param config, 配置文件内容
	 * @return int 0: 成功, -1:失败
	 **/
	public int loadConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<String> config);
	/**
	 * 读取配置文件
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param config, 配置文件内容
	 * @return int 0: 成功, -1:失败
	 **/
	public int loadConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<String> config, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 读取配置文件
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param config, 配置文件内容
	 * @return int 0: 成功, -1:失败
	 **/
	public void async_loadConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo);
	/**
	 * 读取配置文件
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param config, 配置文件内容
	 * @return int 0: 成功, -1:失败
	 **/
	public void async_loadConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 检查配置文件是否符合TC_Config格式
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public int checkConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<String> result);
	/**
	 * 检查配置文件是否符合TC_Config格式
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public int checkConfigByInfo(ConfigInfo configInfo, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 检查配置文件是否符合TC_Config格式
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public void async_checkConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo);
	/**
	 * 检查配置文件是否符合TC_Config格式
	 * @param configInfo, ConfigInfo 配置文件信息
	 * @param result, 提示
	 * @return int 0: 合法, -1:非法
	 **/
	public void async_checkConfigByInfo(@TarsCallback ConfigPrxCallback callback, ConfigInfo configInfo, @TarsContext java.util.Map<String, String> ctx);
}
