module tars
{

// 认证状态：
enum AUTH_STATE
{
    AUTH_INIT = -127,    // 鉴权的未初始化值
    AUTH_SUCC = 0,       // 鉴权成功完成
    AUTH_WAIT_RSP = 127, // 等待AUTH服务鉴权返回,这种状态下不应该收到鉴权请求

    AUTH_PROTO_ERR = -100,      // 协议错误
    AUTH_WRONG_OBJ = -101,      // obj不存在
    AUTH_WRONG_CLIENT = -102,   // client app.server不存在
    AUTH_WRONG_TOKEN = -103,    // token not match
    AUTH_ERROR = -104,          // 鉴权其它错误

    // 其它负数 [-1,-99] : 认证的失败状态，用户自定义
};

// 认证类型：
enum AUTH_TYPE
{
    AUTH_TYPENONE = 0,      // 无
    AUTH_TYPEREMOTE = 1,    // 走authserver

    //AUTH_TYPEANONY = 2,   // 鉴权允许匿名
    //AUTH_TYPEREMOTE = 2,  // 异步鉴权不再支持，201804
};


/*
* 唯一标识token
*/
struct TokenKey
{
    1 require string sApplication; // client app
    2 require string sServer; // client server
	3 require string sObjName; // call this obj, name是全局唯一的
};


/*
* 鉴权请求,从client到业务server到AUTH
*/
struct AuthRequest
{
    1 require string sApplication; // client app
    2 require string sServer; // client server
    3 require string sToken;
};

/*鉴权结果是int， state的值*/

/*
* 账号请求,从web到AUTH
*/
struct TokenRequest
{
	1 require vector<string> vObjName; // objname是全局唯一的
};

/*
* 账号库,从AUTH到web
*/
struct TokenResponse
{
	1 require string sObjName;              // objname是全局唯一的
	2 require map<string, string> mTokens;  // key = 主调方app.server, value = token
};
/*
* req 申请token,从web到AUTH, web ip需要认证，最好是白名单
*/
struct ApplyTokenRequest
{
	1 require TokenKey sKey;
};

/*
* rsp 
*/
struct ApplyTokenResponse
{
    1 require TokenKey sKey;
	2 require string sToken;
};

/*
* req 删除token,从web到AUTH, web ip需要认证，最好是白名单
*/
struct DeleteTokenRequest
{
	1 require TokenKey sKey;
};


interface Auth
{
    /**
    * 请求远程鉴权,被调服务向authserver发送token，authserver返回状态
    **/
    int authProcess(AuthRequest request);
    /**
    * 请求token账号库
    **/
    vector<TokenResponse> getTokens(TokenRequest request);
    /**
    * 创建token
    **/
    ApplyTokenResponse applyToken(ApplyTokenRequest request);
    /**
    * del token from web
    **/
    int deleteToken(DeleteTokenRequest request);
};

};
