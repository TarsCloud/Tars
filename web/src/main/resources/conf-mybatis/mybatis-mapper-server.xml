<?xml version="1.0" encoding="UTF-8"?>
<!--
 Tencent is pleased to support the open source community by making Tars available.

 Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.

 Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 in compliance with the License. You may obtain a copy of the License at

 https://opensource.org/licenses/BSD-3-Clause

 Unless required by applicable law or agreed to in writing, software distributed
 under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qq.tars.db.ServerMapper">

    <insert id="insertServerConf" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO db_tars.t_server_conf
        (
            application, server_name, node_group, node_name, base_path, exe_path, template_name, bak_flag,
            setting_state, present_state, process_id, patch_version, patch_time, patch_user, tars_version, posttime,
            lastuser, server_type, start_script_path, stop_script_path, monitor_script_path, enable_group,
            enable_set, set_name, set_area, set_group, ip_group_name, profile, config_center_port, async_thread_num,
            server_important_type, remote_log_reserve_time, remote_log_compress_time, remote_log_type
        )
        VALUES
            (
                #{application},
                #{serverName},
                #{nodeGroup},
                #{nodeName},
                #{basePath},
                #{exePath},
                #{templateName},
                #{bakFlag},
                #{settingState},
                #{presentState},
                #{processId},
                #{patchVersion},
                #{patchTime},
                #{patchUser},
                #{tarsVersion},
                #{posttime},
                #{lastuser},
                #{serverType},
                #{startScriptPath},
                #{stopScriptPath},
                #{monitorScriptPath},
                #{enableGroup},
                #{enableSet},
                #{setName},
                #{setArea},
                #{setGroup},
                #{ipGroupName},
                #{profile},
                #{configCenterPort},
                #{asyncThreadNum},
                #{serverImportantType},
                #{remoteLogReserveTime},
                #{remoteLogCompressTime},
                #{remoteLogType}
            )
    </insert>

    <delete id="deleteServerConf">
        DELETE FROM db_tars.t_server_conf
        WHERE id = #{id}
    </delete>

    <update id="updateServerConf">
        UPDATE
            db_tars.t_server_conf
        SET
            bak_flag            = #{bakFlag},
            template_name       = #{templateName},
            server_type         = #{serverType},
            enable_set          = #{enableSet},
            set_name            = #{setName},
            set_area            = #{setArea},
            set_group           = #{setGroup},
            async_thread_num    = #{asyncThreadNum},
            base_path           = #{basePath},
            exe_path            = #{exePath},
            start_script_path   = #{startScriptPath},
            stop_script_path    = #{stopScriptPath},
            monitor_script_path = #{monitorScriptPath},
            profile             = #{profile},
            posttime            = #{posttime}
        WHERE
            id = #{id}
    </update>

    <select id="getServerConfs4Tree" resultType="ServerConf">
        SELECT
            DISTINCT
            application,
            server_name,
            enable_set,
            IF(enable_set = 'N', NULL, set_name)  AS set_name,
            IF(enable_set = 'N', NULL, set_area)  AS set_area,
            IF(enable_set = 'N', NULL, set_group) AS set_group
        FROM db_tars.t_server_conf
    </select>

    <select id="getServerConf" resultType="ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE TRUE
        <if test="application != null">
            AND application=#{application}
        </if>
        <if test="serverName != null">
            AND server_name=#{serverName}
        </if>
        <if test="enableSet">
            <if test="setName != null">
                AND set_name=#{setName}
            </if>
            <if test="setArea != null">
                AND set_area=#{setArea}
            </if>
            <if test="setGroup != null">
                AND set_group=#{setGroup}
            </if>
        </if>
        <if test="!enableSet">
          AND enable_set='N'
        </if>
    </select>

    <select id="queryInactiveServerConf" resultType="ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE
        setting_state='inactive'
        <if test="application!=null">
            AND application like "%"#{application}"%"
        </if>
        <if test="serverName!=null">
            AND server_name like "%"#{serverName}"%"
        </if>
        <if test="nodeName!=null">
            AND node_name like "%"#{nodeName}"%"
        </if>
    </select>

    <select id="loadServerConf" resultType="ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE
            id = #{id}
    </select>

    <select id="loadServerConfByName" resultType="ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE
        application = #{application}
        AND server_name = #{serverName}
        AND node_name = #{nodeName}
    </select>

    <select id="loadServerConfs" resultType="ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE
        <choose>
            <when test="ids != null and ids.size() > 0">
                id in
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                FALSE
            </otherwise>
        </choose>
    </select>

    <select id="getServerConfsByTemplate" resultType="com.qq.tars.entity.ServerConf">
        SELECT *
        FROM db_tars.t_server_conf
        WHERE
        <choose>
            <when test="templateName!=null and templateName.length()>0">
                template_name=#{templateName}
            </when>
            <otherwise>
                FALSE
            </otherwise>
        </choose>
    </select>

    <select id="getApplication" resultType="java.lang.String">
        SELECT
        DISTINCT application
        FROM db_tars.t_server_conf
    </select>

    <select id="getServerName" resultType="java.lang.String">
        SELECT
        DISTINCT server_name
        FROM db_tars.t_server_conf
        WHERE
        application = #{application}
    </select>

    <select id="getSet" resultType="String">
        SELECT
        DISTINCT IF(enable_set = 'Y', CONCAT(set_name, '.', set_area, '.', set_group), '')
        FROM db_tars.t_server_conf
        WHERE
        application = #{application}
        AND server_name = #{serverName}
    </select>

    <select id="getNodeName" resultType="java.lang.String">
        SELECT
        DISTINCT node_name
        FROM db_tars.t_server_conf
        WHERE
        application=#{application}
        AND server_name=#{serverName}
        <choose>
            <when test="enableSet">
                AND enable_set='Y'
                AND set_name=#{setName}
                AND set_area=#{setArea}
                AND set_group=#{setGroup}
            </when>
            <otherwise>
                AND enable_set='N'
            </otherwise>
        </choose>
    </select>

</mapper>
