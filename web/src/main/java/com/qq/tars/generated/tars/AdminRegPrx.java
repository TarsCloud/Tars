// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.qq.tars.generated.tars;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;

/**
 * admin 管理接口
 */
@Servant
public interface AdminRegPrx {
	/**
	 * 请求异步任务
	 *
	 * @param taskList : 任务列表
	 * @param serial: 串行
	 *
	 * @return 0: 成功, <0:失败
	 */
	public int addTaskReq(TaskReq taskReq);
	/**
	 * 请求异步任务
	 *
	 * @param taskList : 任务列表
	 * @param serial: 串行
	 *
	 * @return 0: 成功, <0:失败
	 */
	public int addTaskReq(TaskReq taskReq, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 请求异步任务
	 *
	 * @param taskList : 任务列表
	 * @param serial: 串行
	 *
	 * @return 0: 成功, <0:失败
	 */
	public void async_addTaskReq(@TarsCallback AdminRegPrxCallback callback, TaskReq taskReq);
	/**
	 * 请求异步任务
	 *
	 * @param taskList : 任务列表
	 * @param serial: 串行
	 *
	 * @return 0: 成功, <0:失败
	 */
	public void async_addTaskReq(@TarsCallback AdminRegPrxCallback callback, TaskReq taskReq, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取任务状态
	 *
	 * @param taskIdList : 任务列表id
	 *
	 * @return 任务状态
	 */
	public int getTaskRsp(String taskNo, @TarsHolder Holder<TaskRsp> taskRsp);
	/**
	 * 获取任务状态
	 *
	 * @param taskIdList : 任务列表id
	 *
	 * @return 任务状态
	 */
	public int getTaskRsp(String taskNo, @TarsHolder Holder<TaskRsp> taskRsp, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取任务状态
	 *
	 * @param taskIdList : 任务列表id
	 *
	 * @return 任务状态
	 */
	public void async_getTaskRsp(@TarsCallback AdminRegPrxCallback callback, String taskNo);
	/**
	 * 获取任务状态
	 *
	 * @param taskIdList : 任务列表id
	 *
	 * @return 任务状态
	 */
	public void async_getTaskRsp(@TarsCallback AdminRegPrxCallback callback, String taskNo, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取根据应用, 服务, 命令字获取历史任务状态
	 *
	 * @param application : 应用名
	 * @param serverName : 服务名
	 * @param command : 命令字
	 *
	 * @return TaskRsp
	 */
	public int getTaskHistory(String application, String serverName, String command, @TarsHolder Holder<java.util.List<TaskRsp>> taskRsps);
	/**
	 * 获取根据应用, 服务, 命令字获取历史任务状态
	 *
	 * @param application : 应用名
	 * @param serverName : 服务名
	 * @param command : 命令字
	 *
	 * @return TaskRsp
	 */
	public int getTaskHistory(String application, String serverName, String command, @TarsHolder Holder<java.util.List<TaskRsp>> taskRsps, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取根据应用, 服务, 命令字获取历史任务状态
	 *
	 * @param application : 应用名
	 * @param serverName : 服务名
	 * @param command : 命令字
	 *
	 * @return TaskRsp
	 */
	public void async_getTaskHistory(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String command);
	/**
	 * 获取根据应用, 服务, 命令字获取历史任务状态
	 *
	 * @param application : 应用名
	 * @param serverName : 服务名
	 * @param command : 命令字
	 *
	 * @return TaskRsp
	 */
	public void async_getTaskHistory(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String command, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 设置task item的信息(内部使用)
	 * @param itemNo, itemno
	 * @param startTime, 开始时间
	 * @param endTime, 结束时间
	 * @param status, 状态
	 * @param log, 异常日志
	 * @return int, 0: 成功, <0: 失败
	 */
	public int setTaskItemInfo(String itemNo, java.util.Map<String, String> info);
	/**
	 * 设置task item的信息(内部使用)
	 * @param itemNo, itemno
	 * @param startTime, 开始时间
	 * @param endTime, 结束时间
	 * @param status, 状态
	 * @param log, 异常日志
	 * @return int, 0: 成功, <0: 失败
	 */
	public int setTaskItemInfo(String itemNo, java.util.Map<String, String> info, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 设置task item的信息(内部使用)
	 * @param itemNo, itemno
	 * @param startTime, 开始时间
	 * @param endTime, 结束时间
	 * @param status, 状态
	 * @param log, 异常日志
	 * @return int, 0: 成功, <0: 失败
	 */
	public void async_setTaskItemInfo(@TarsCallback AdminRegPrxCallback callback, String itemNo, java.util.Map<String, String> info);
	/**
	 * 设置task item的信息(内部使用)
	 * @param itemNo, itemno
	 * @param startTime, 开始时间
	 * @param endTime, 结束时间
	 * @param status, 状态
	 * @param log, 异常日志
	 * @return int, 0: 成功, <0: 失败
	 */
	public void async_setTaskItemInfo(@TarsCallback AdminRegPrxCallback callback, String itemNo, java.util.Map<String, String> info, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取application列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return application列表
	 */
	public java.util.List<String> getAllApplicationNames(@TarsHolder Holder<String> result);
	/**
	 * 获取application列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return application列表
	 */
	public java.util.List<String> getAllApplicationNames(@TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取application列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return application列表
	 */
	public void async_getAllApplicationNames(@TarsCallback AdminRegPrxCallback callback);
	/**
	 * 获取application列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return application列表
	 */
	public void async_getAllApplicationNames(@TarsCallback AdminRegPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取node列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return node 列表
	 */
	public java.util.List<String> getAllNodeNames(@TarsHolder Holder<String> result);
	/**
	 * 获取node列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return node 列表
	 */
	public java.util.List<String> getAllNodeNames(@TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取node列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return node 列表
	 */
	public void async_getAllNodeNames(@TarsCallback AdminRegPrxCallback callback);
	/**
	 * 获取node列表
	 *
	 * @param out result : 结果描述
	 *
	 * @return node 列表
	 */
	public void async_getAllNodeNames(@TarsCallback AdminRegPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * ping node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : true-ping通；false-不通
	 */
	public boolean pingNode(String name, @TarsHolder Holder<String> result);
	/**
	 * ping node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : true-ping通；false-不通
	 */
	public boolean pingNode(String name, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * ping node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : true-ping通；false-不通
	 */
	public void async_pingNode(@TarsCallback AdminRegPrxCallback callback, String name);
	/**
	 * ping node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : true-ping通；false-不通
	 */
	public void async_pingNode(@TarsCallback AdminRegPrxCallback callback, String name, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * get node version
	 *
	 * @param name: node id
	 * @param out version ：版本
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getNodeVesion(String name, @TarsHolder Holder<String> version, @TarsHolder Holder<String> result);
	/**
	 * get node version
	 *
	 * @param name: node id
	 * @param out version ：版本
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getNodeVesion(String name, @TarsHolder Holder<String> version, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * get node version
	 *
	 * @param name: node id
	 * @param out version ：版本
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getNodeVesion(@TarsCallback AdminRegPrxCallback callback, String name);
	/**
	 * get node version
	 *
	 * @param name: node id
	 * @param out version ：版本
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getNodeVesion(@TarsCallback AdminRegPrxCallback callback, String name, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 停止 node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int shutdownNode(String name, @TarsHolder Holder<String> result);
	/**
	 * 停止 node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int shutdownNode(String name, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 停止 node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_shutdownNode(@TarsCallback AdminRegPrxCallback callback, String name);
	/**
	 * 停止 node
	 *
	 * @param name: node id
	 * @param out result : 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_shutdownNode(@TarsCallback AdminRegPrxCallback callback, String name, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取server列表
	 *
	 * @param name: null
	 * @param out result : 结果描述
	 *
	 * @return: server列表及相关信息
	 */
	public java.util.List<java.util.List<String>> getAllServerIds(@TarsHolder Holder<String> result);
	/**
	 * 获取server列表
	 *
	 * @param name: null
	 * @param out result : 结果描述
	 *
	 * @return: server列表及相关信息
	 */
	public java.util.List<java.util.List<String>> getAllServerIds(@TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取server列表
	 *
	 * @param name: null
	 * @param out result : 结果描述
	 *
	 * @return: server列表及相关信息
	 */
	public void async_getAllServerIds(@TarsCallback AdminRegPrxCallback callback);
	/**
	 * 获取server列表
	 *
	 * @param name: null
	 * @param out result : 结果描述
	 *
	 * @return: server列表及相关信息
	 */
	public void async_getAllServerIds(@TarsCallback AdminRegPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取特定server状态
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeNmae   : node id
	 * @param out state  : 状态
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int getServerState(String application, String serverName, String nodeName, @TarsHolder Holder<ServerStateDesc> state, @TarsHolder Holder<String> result);
	/**
	 * 获取特定server状态
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeNmae   : node id
	 * @param out state  : 状态
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int getServerState(String application, String serverName, String nodeName, @TarsHolder Holder<ServerStateDesc> state, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取特定server状态
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeNmae   : node id
	 * @param out state  : 状态
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_getServerState(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 获取特定server状态
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeNmae   : node id
	 * @param out state  : 状态
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_getServerState(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取某ip所属group 用于机房部署  例如某ip属于那个机房
	 *
	 * @param nodeNmae   : ip
	 * @param out int    : group id
	 * @param out result : 结果描述
	 *
	 * @return : 处理结果
	 */
	public int getGroupId(String ip, @TarsHolder Holder<java.lang.Integer> groupId, @TarsHolder Holder<String> result);
	/**
	 * 获取某ip所属group 用于机房部署  例如某ip属于那个机房
	 *
	 * @param nodeNmae   : ip
	 * @param out int    : group id
	 * @param out result : 结果描述
	 *
	 * @return : 处理结果
	 */
	public int getGroupId(String ip, @TarsHolder Holder<java.lang.Integer> groupId, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取某ip所属group 用于机房部署  例如某ip属于那个机房
	 *
	 * @param nodeNmae   : ip
	 * @param out int    : group id
	 * @param out result : 结果描述
	 *
	 * @return : 处理结果
	 */
	public void async_getGroupId(@TarsCallback AdminRegPrxCallback callback, String ip);
	/**
	 * 获取某ip所属group 用于机房部署  例如某ip属于那个机房
	 *
	 * @param nodeNmae   : ip
	 * @param out int    : group id
	 * @param out result : 结果描述
	 *
	 * @return : 处理结果
	 */
	public void async_getGroupId(@TarsCallback AdminRegPrxCallback callback, String ip, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 启动特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int startServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result);
	/**
	 * 启动特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int startServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 启动特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_startServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 启动特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_startServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 停止特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int stopServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result);
	/**
	 * 停止特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int stopServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 停止特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_stopServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 停止特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_stopServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 重启特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int restartServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result);
	/**
	 * 重启特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int restartServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 重启特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_restartServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 重启特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_restartServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 通知server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param command    : 命令
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int notifyServer(String application, String serverName, String nodeName, String command, @TarsHolder Holder<String> result);
	/**
	 * 通知server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param command    : 命令
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int notifyServer(String application, String serverName, String nodeName, String command, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 通知server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param command    : 命令
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_notifyServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String command);
	/**
	 * 通知server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param command    : 命令
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_notifyServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String command, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 卸载服务
	 * @param application
	 * @param serverName
	 * @param nodeName
	 * @return 0: 成功, <0: 失败
	 */
	public int undeploy(String application, String serverName, String nodeName, String user, @TarsHolder Holder<String> log);
	/**
	 * 卸载服务
	 * @param application
	 * @param serverName
	 * @param nodeName
	 * @return 0: 成功, <0: 失败
	 */
	public int undeploy(String application, String serverName, String nodeName, String user, @TarsHolder Holder<String> log, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 卸载服务
	 * @param application
	 * @param serverName
	 * @param nodeName
	 * @return 0: 成功, <0: 失败
	 */
	public void async_undeploy(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String user);
	/**
	 * 卸载服务
	 * @param application
	 * @param serverName
	 * @param nodeName
	 * @return 0: 成功, <0: 失败
	 */
	public void async_undeploy(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String user, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 批量发布服务
	 *
	 * @param vector<PatchRequest>: 批量发布的请求
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int batchPatch(PatchRequest req, @TarsHolder Holder<String> result);
	/**
	 * 批量发布服务
	 *
	 * @param vector<PatchRequest>: 批量发布的请求
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int batchPatch(PatchRequest req, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 批量发布服务
	 *
	 * @param vector<PatchRequest>: 批量发布的请求
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_batchPatch(@TarsCallback AdminRegPrxCallback callback, PatchRequest req);
	/**
	 * 批量发布服务
	 *
	 * @param vector<PatchRequest>: 批量发布的请求
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_batchPatch(@TarsCallback AdminRegPrxCallback callback, PatchRequest req, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 更新发布状态
	 *
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int updatePatchLog(String application, String serverName, String nodeName, String patchId, String user, String patchType, boolean succ);
	/**
	 * 更新发布状态
	 *
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int updatePatchLog(String application, String serverName, String nodeName, String patchId, String user, String patchType, boolean succ, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 更新发布状态
	 *
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_updatePatchLog(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String patchId, String user, String patchType, boolean succ);
	/**
	 * 更新发布状态
	 *
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_updatePatchLog(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, String patchId, String user, String patchType, boolean succ, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取服务发布进度
	 * @param application  : 服务所属应用名
	 * @param serverName   : 服务名
	 * @param nodeName     : node id
	 * @out tPatchInfo     ：发布信息
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int getPatchPercent(String application, String serverName, String nodeName, @TarsHolder Holder<PatchInfo> tPatchInfo);
	/**
	 * 获取服务发布进度
	 * @param application  : 服务所属应用名
	 * @param serverName   : 服务名
	 * @param nodeName     : node id
	 * @out tPatchInfo     ：发布信息
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int getPatchPercent(String application, String serverName, String nodeName, @TarsHolder Holder<PatchInfo> tPatchInfo, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取服务发布进度
	 * @param application  : 服务所属应用名
	 * @param serverName   : 服务名
	 * @param nodeName     : node id
	 * @out tPatchInfo     ：发布信息
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_getPatchPercent(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 获取服务发布进度
	 * @param application  : 服务所属应用名
	 * @param serverName   : 服务名
	 * @param nodeName     : node id
	 * @out tPatchInfo     ：发布信息
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_getPatchPercent(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 加载特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int loadServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result);
	/**
	 * 加载特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public int loadServer(String application, String serverName, String nodeName, @TarsHolder Holder<String> result, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 加载特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_loadServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 加载特定server
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out result : 结果描述
	 *
	 * @return : 返回值详见tarsErrCode枚举值
	 */
	public void async_loadServer(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取相应模板
	 *
	 * @param profileName: 模板名称
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getProfileTemplate(String profileName, @TarsHolder Holder<String> profileTemplate, @TarsHolder Holder<String> resultDesc);
	/**
	 * 获取相应模板
	 *
	 * @param profileName: 模板名称
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getProfileTemplate(String profileName, @TarsHolder Holder<String> profileTemplate, @TarsHolder Holder<String> resultDesc, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取相应模板
	 *
	 * @param profileName: 模板名称
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getProfileTemplate(@TarsCallback AdminRegPrxCallback callback, String profileName);
	/**
	 * 获取相应模板
	 *
	 * @param profileName: 模板名称
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getProfileTemplate(@TarsCallback AdminRegPrxCallback callback, String profileName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取服务相应模板
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getServerProfileTemplate(String application, String serverName, String nodeName, @TarsHolder Holder<String> profileTemplate, @TarsHolder Holder<String> resultDesc);
	/**
	 * 获取服务相应模板
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public int getServerProfileTemplate(String application, String serverName, String nodeName, @TarsHolder Holder<String> profileTemplate, @TarsHolder Holder<String> resultDesc, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * 获取服务相应模板
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getServerProfileTemplate(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName);
	/**
	 * 获取服务相应模板
	 *
	 * @param application: 应用
	 * @param serverName : server名
	 * @param nodeName   : node id
	 * @param out profileTemplate: 模板内容
	 * @param out resultDesc: 结果描述
	 *
	 * @return : 0-成功 others-失败
	 */
	public void async_getServerProfileTemplate(@TarsCallback AdminRegPrxCallback callback, String application, String serverName, String nodeName, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * node通过接口获取连接上主控的node ip
	 * @param sNodeIp:  node 的ip
	 *
	 * @return 0-成功 others-失败
	 */
	public int getClientIp(@TarsHolder Holder<String> sClientIp);
	/**
	 * node通过接口获取连接上主控的node ip
	 * @param sNodeIp:  node 的ip
	 *
	 * @return 0-成功 others-失败
	 */
	public int getClientIp(@TarsHolder Holder<String> sClientIp, @TarsContext java.util.Map<String, String> ctx);
	/**
	 * node通过接口获取连接上主控的node ip
	 * @param sNodeIp:  node 的ip
	 *
	 * @return 0-成功 others-失败
	 */
	public void async_getClientIp(@TarsCallback AdminRegPrxCallback callback);
	/**
	 * node通过接口获取连接上主控的node ip
	 * @param sNodeIp:  node 的ip
	 *
	 * @return 0-成功 others-失败
	 */
	public void async_getClientIp(@TarsCallback AdminRegPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);
}
