// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.qq.tars.generated.tars;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TokenKey {

	@TarsStructProperty(order = 1, isRequire = true)
	public String sApplication = "";
	@TarsStructProperty(order = 2, isRequire = true)
	public String sServer = "";
	@TarsStructProperty(order = 3, isRequire = true)
	public String sObjName = "";

	public String getSApplication() {
		return sApplication;
	}

	public void setSApplication(String sApplication) {
		this.sApplication = sApplication;
	}

	public String getSServer() {
		return sServer;
	}

	public void setSServer(String sServer) {
		this.sServer = sServer;
	}

	public String getSObjName() {
		return sObjName;
	}

	public void setSObjName(String sObjName) {
		this.sObjName = sObjName;
	}

	public TokenKey() {
	}

	public TokenKey(String sApplication, String sServer, String sObjName) {
		this.sApplication = sApplication;
		this.sServer = sServer;
		this.sObjName = sObjName;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(sApplication);
		result = prime * result + TarsUtil.hashCode(sServer);
		result = prime * result + TarsUtil.hashCode(sObjName);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TokenKey)) {
			return false;
		}
		TokenKey other = (TokenKey) obj;
		return (
			TarsUtil.equals(sApplication, other.sApplication) &&
			TarsUtil.equals(sServer, other.sServer) &&
			TarsUtil.equals(sObjName, other.sObjName) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(sApplication, 1);
		_os.write(sServer, 2);
		_os.write(sObjName, 3);
	}


	public void readFrom(TarsInputStream _is) {
		this.sApplication = _is.readString(1, true);
		this.sServer = _is.readString(2, true);
		this.sObjName = _is.readString(3, true);
	}

}
