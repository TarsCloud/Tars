<?php

// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.1.4.2 by WSRD Tencent.
// Generated from `Hello.tars'
// **********************************************************************


require_once('tars.php');

class A extends c_struct
{
    public $b;

    public function __clone()
    {
        $this->b = clone $this->b;
    }

    public function __construct()
    {
        $this->b = new  c_int;
    }

    public function get_class_name()
    {
        return "MTT.A";
    }

    public function write(&$_out,$tag)
    {
        tars_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->b->write($_out,0);
        tars_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        tars_header::_check_struct($_in,$type,$tag,$isRequire);
        tars_header::_unpack_header($_in,$type,$this_tag);
        $this->b->read($_in , 0, true);
        $this->_skip_struct($_in);

    }
}

class HelloWorld extends c_struct
{
    public $nId;
    public $sMsg;
    public $vNews;
    public $mAddr;
    public $a;

    public function __clone()
    {
        $this->nId = clone $this->nId;
        $this->sMsg = clone $this->sMsg;
        $this->vNews = clone $this->vNews;
        $this->mAddr = clone $this->mAddr;
        $this->a = clone $this->a;
    }

    public function __construct()
    {
        $this->nId = new  c_int;
        $this->sMsg = new  c_string;
        $this->vNews = new  c_vector (new c_string);
        $this->mAddr = new  c_map (new c_int,new c_int);
        $this->a = new  A;
    }

    public function get_class_name()
    {
        return "MTT.HelloWorld";
    }

    public function write(&$_out,$tag)
    {
        tars_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->nId->write($_out,0);
        $this->sMsg->write($_out,1);
        $this->vNews->write($_out,2);
        $this->mAddr->write($_out,5);
        $this->a->write($_out,6);
        tars_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        tars_header::_check_struct($_in,$type,$tag,$isRequire);
        tars_header::_unpack_header($_in,$type,$this_tag);
        $this->nId->read($_in , 0, true);
        $this->sMsg->read($_in , 1, true);
        $this->vNews->read($_in , 2, true);
        $this->mAddr->read($_in , 5, true);
        $this->a->read($_in , 6, true);
        $this->_skip_struct($_in);

    }
}

class HelloPerson extends c_struct
{
    public $nId;
    public $sName;
    public $vFavor;
    public $ePet;
    public $mAddr;
    public $sPhone;
    public $bMan;
    public $shello;

    public function __clone()
    {
        $this->nId = clone $this->nId;
        $this->sName = clone $this->sName;
        $this->vFavor = clone $this->vFavor;
        $this->ePet = clone $this->ePet;
        $this->mAddr = clone $this->mAddr;
        $this->sPhone = clone $this->sPhone;
        $this->bMan = clone $this->bMan;
        $this->shello = clone $this->shello;
    }

    public function __construct()
    {
        $this->nId = new  c_int;
        $this->sName = new  c_string;
        $this->vFavor = new  c_vector (new c_string);
        $this->ePet = new  c_int;
        $this->mAddr = new  c_map (new c_int,new c_string);
        $this->sPhone = new  c_string;
        $this->bMan = new  c_char;
        $this->shello = new  HelloWorld;
    }

    public function get_class_name()
    {
        return "MTT.HelloPerson";
    }

    public function write(&$_out,$tag)
    {
        tars_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->nId->write($_out,0);
        $this->sName->write($_out,1);
        $this->vFavor->write($_out,2);
        $this->ePet->write($_out,3);
        $this->mAddr->write($_out,5);
        $this->sPhone->write($_out,6);
        $this->bMan->write($_out,7);
        $this->shello->write($_out,9);
        tars_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        tars_header::_check_struct($_in,$type,$tag,$isRequire);
        tars_header::_unpack_header($_in,$type,$this_tag);
        $this->nId->read($_in , 0, true);
        $this->sName->read($_in , 1, true);
        $this->vFavor->read($_in , 2, false);
        $this->ePet->read($_in , 3, false);
        $this->mAddr->read($_in , 5, false);
        $this->sPhone->read($_in , 6, false);
        $this->bMan->read($_in , 7, false);
        $this->shello->read($_in , 9, false);
        $this->_skip_struct($_in);

    }
}


?>
