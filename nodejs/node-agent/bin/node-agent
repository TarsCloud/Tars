#!/usr/bin/env node

/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 */

'use strict';

var path      = require('path');
var util      = require('util');
var fs        = require('fs');

var chalk     = require('chalk');
var commander = require('commander');
var pkg       = require('../package.json');

var constants = require('../lib/constants');
var convert   = require('../lib/util/convert');
var CLI       = require('../lib/CLI');

var TarsConfigure = require('@tars/utils').Config;

var split = function(val) {
	return val.split(' ');
};

var jsonParse = function(val) {
	try {
		return JSON.parse(val);
	} catch(e) {
		return '';
	}
};

var aliveParse = function(val) {
	if (val === 'off') {
		return 0;
	}
	return parseInt(val);
};

var instancesParse = function(val) {
	if (val === 'max') {
		return -1;
	}

	if (val === 'auto') {
		return 0;
	}

	val = parseInt(val);
	if (isNaN(val) || val < 0) {
		return 0;
	} else {
		return val;
	}
};

var toBoolean = function(val) {
	if (typeof val === 'string') {
		return val === 'on';
	} else {
		return false;
	}
};

var existsSync = function(path) {
	try {
		fs.statSync(path);
		return true; 
	} catch (e) { 
		return false; 
	}
};

var parseConfig = function(script, file) {
	var TarsConfig = new TarsConfigure(),
		opts = {
			config : file
		}, serverObj;

	TarsConfig.parseFile(file);

	serverObj = TarsConfig.get('tars.application', {});

	['run-as-user',
	'run-as-group',
	{
		org : 'asyncthread',
		dest : 'instances',
		coercion : instancesParse,
		domain : 'client'
	}, {
		org : 'instances',
		coercion : instancesParse
	}, {
		org : 'script-args',
		coercion : split
	}, {
		org : 'node-args',
		coercion : split
	}, {
		org : 'max-memory-restart',
		coercion : parseInt
	}, {
		org : 'deactivating-timeout',
		dest : 'graceful-shutdown',
		coercion : parseInt
	}, {
		org : 'exception-max',
		coercion : parseInt
	}, {
		org : 'exception-time',
		coercion : parseInt
	}, {
		org : 'keepalive-time',
		coercion : aliveParse
	}, {
		org : 'logpath',
		dest : 'log'
	}, {
		org : 'log-files',
		dest : 'applog-max-files',
		coercion : parseInt
	}, {
		org : 'logsize',
		dest : 'applog-max-size',
		coercion : convert.friendlyformat
	}, {
		org : 'logLevel',
		dest : 'applog-level'
	}, {
		org : 'node',
		dest : 'tars-node'
	}, {
		org : 'local',
		dest : 'tars-local'
	}, {
		org : 'tars-monitor',
		coercion : toBoolean
	}, {
		org : 'tars-monitor-http-threshold',
		coercion : aliveParse
	}, {
		org : 'tars-monitor-http-seppath',
		coercion : toBoolean
	}].forEach(function(item) {
		var value = (serverObj[item.domain || 'server'] || {})[item.org || item];
	 	if (value) {
	 		opts[convert.camelcase(item.dest || item.org || item)] = item.coercion ? item.coercion(value) : value;
	 	}
	 });

	opts['name'] = TarsConfig.get('tars.application.server.app', constants.TARS_DEFAULT_APP) + '.' + TarsConfig.get('tars.application.server.server', path.basename(script, path.extname(script)));
	
	if (serverObj['server']) {
		Object.getOwnPropertyNames(serverObj['server']).some(function(key) {
			if (serverObj['server'][key] && typeof serverObj['server'][key] === 'object' && serverObj['server'][key].protocol === 'not_tars') {
				opts[convert.camelcase('http-address')] = serverObj['server'][key].endpoint.match(/\-h\s([^\s]+)/)[1] + ':' + serverObj['server'][key].endpoint.match(/\-p\s([^\s]+)/)[1];
				return true;
			}
			return false;
		});
	}

	return opts;
};

var parsePackage = function(file) {
	if (!scriptPkg) {
		scriptPkg = require(file);
	}

	scriptPkg.nodeAgent = scriptPkg.nodeAgent || {};

	if (scriptPkg.name) {
		scriptPkg.nodeAgent.name = scriptPkg.name;
	}

	return scriptPkg.nodeAgent;
};

var error = function(str, code) {
	console.error(chalk.red(str));
	process.exit(code || 0);
};

commander
	.version(pkg.version)
	.option('-c, --config <config>', 'specify tars config file. NOTE: independent config will be override this')
	.option('-n, --name <name>', 'set a <name> for script - e.g. app.servername')
	.option('-l, --log <path>', 'specify log file')
	.option('-i, --instances <number>', 'launch [number] instances (for networked app)(load balanced)', instancesParse)
	.option('--env <environment_name>', 'specify environment to get specific env variables (for JSON declaration)', jsonParse)
	.option('--http-address <http_address>', 'specify http ip:port address to pass to script - e.g. 127.0.0.1:80')
	.option('--script-args <script_args>', "space delimited arguments to pass to script - e.g. --use=\"https\"", split)
	.option('--node-args <node_args>', "space delimited arguments to pass to node - e.g. --node-args=\"--debug=7001 --trace-deprecation\"", split)
	.option('--run-as-user <run_as_user>', 'The user or uid to run a managed process as')
	.option('--run-as-group <run_as_group>', 'The group or gid to run a managed process as')
	.option('--max-memory-restart <memory>', 'specify max memory amount used to autorestart (in megaoctets)', parseInt)
	.option('--graceful-shutdown <graceful>', util.format('specify graceful shutdown timeout (in millisecond), default is %sms', constants.GRACEFUL_TIMEOUT), parseInt)
	.option('--exception-max <exp_max>', util.format('The program will be terminated if an exceeding max exception count, default is %s', constants.EXCEPTION_TOTAL), parseInt)
	.option('--exception-time <exp_time>', util.format('The program will be terminated if an exception occurs within a particular period of time, default is %sms', constants.EXCEPTION_TIME), parseInt)
	.option('--keepalive-time <detect_time>', util.format('specify the interval for detecting the worker which could be set to [off] if you want to debug and the default value is %ss', constants.WORKER_DETECT_INTERVAL), aliveParse)
	.option('--applog-max-files <applog_max_files>', util.format('specify max number of rolling log, default is %s', constants.APPLOG_MAX_FILES), parseInt)
	.option('--applog-max-size <applog_max_size>', util.format('specify max file size for each rolling log, use human readable unit in [K|G|M], default is %s', convert.byteformat(constants.APPLOG_MAX_SIZE)), convert.friendlyformat)
	.option('--applog-level <applog_level>', util.format('define log level, default is %s', constants.APPLOG_LEVEL))
	.option('--tars-node <tars_node>', 'set tars node conncetion string, agent would send notifications to tars node - e.g. tars.tarsnode.ServerObj@tcp -h 127.0.0.1 -p 10000 -t 60000')
	.option('--tars-local <tars_local>', 'set local interface setup string, agent would receive the notifications from tars node - e.g. tcp -h 127.0.0.1 -p 10000 -t 3000')
	.option('--tars-monitor <tars_monitor>', util.format('enable or disable service monitor running in tars platform, and the default value is %s', constants.TARS_MONITOR ? 'on' : 'off'), toBoolean)
	.option('--tars-monitor-http-threshold <http_threshold>', util.format('if the http(s) status code is large than the preseted threshold then this request will be considered error. default threshold is %s, set it "off" to disabled', constants.TARS_MONITOR_HTTP_THRESHOLD), aliveParse)
	.option('--tars-monitor-http-seppath <http_seppath>', util.format('separate url pathname as interface name, default is %s', constants.TARS_MONITOR_HTTP_SEPPATH ? 'on' : 'off'), toBoolean)
	.usage('app.js [options]')
	.parse(process.argv);

if (process.argv.length == 2) {
  commander.parse(process.argv);
  commander.outputHelp();
  process.exit(0);
}

if (!commander.args[0]) {
	error('>> The script is NOT specified.');
	return;
}

var scriptStat, scriptPkg, entrypoint, configOpt;

try {
	scriptStat = fs.statSync(commander.args[0]);
} catch(e) {
	error('>> Can NOT find the script or directory');
	return;
}

if (scriptStat.isFile() && path.extname(commander.args[0]).toLowerCase() === '.js') {
	entrypoint = path.resolve(commander.args[0]);
} else if (scriptStat.isDirectory()) {
	if (existsSync(path.resolve(commander.args[0], 'package.json'))) {
		try {
			scriptPkg = require(path.resolve(commander.args[0], 'package.json'));
		} catch(e) {}

		if (scriptPkg && scriptPkg.nodeAgent && scriptPkg.nodeAgent.main) {
			entrypoint = path.resolve(commander.args[0], scriptPkg.nodeAgent.main);
		} else if (scriptPkg && scriptPkg.scripts && scriptPkg.scripts.start && scriptPkg.scripts.start.indexOf('node ') === 0) {
			entrypoint = path.resolve(commander.args[0], scriptPkg.scripts.start.slice(5));
		} else if (scriptPkg && scriptPkg.main) {
			entrypoint = path.resolve(commander.args[0], scriptPkg.main);
		}
	}

	if (!entrypoint) {
		constants.ENTRY_POINT_NAME.some(function(name) {
			if (existsSync(path.resolve(commander.args[0], name))) {
				entrypoint = path.resolve(commander.args[0], name);
				return true;
			} else {
				return false;
			}
		});
	}

	if (!entrypoint) {
		error('>> Can NOT find the entry point in the directory');
		return;
	}
} else {
	error('>> The script is neither a file nor a directory');
	return;
}

if (!existsSync(entrypoint)) {
	error(util.format('>> Can NOT find the entrypoint(%s) in the file system', entrypoint));
	return;
}

if (commander.config) {
	try {
		configOpt = parseConfig(commander.args[0], commander.config);
	} catch(e) {
		error(chalk.red('>> Reading the config file failed.'));
		return;
	}
} else if (existsSync(path.join(path.dirname(entrypoint), 'package.json'))) {
	try {
		configOpt = parsePackage(path.join(path.dirname(entrypoint), 'package.json'));
	} catch(e) {}
}

if (configOpt) {
	Object.getOwnPropertyNames(configOpt).forEach(function(key) {
		if (!commander[key] || typeof commander[key] === 'function') {
			commander[key] = configOpt[key];
		}
	});
}

CLI.start(entrypoint, commander);