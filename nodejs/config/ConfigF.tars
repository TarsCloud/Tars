/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 */

module tars
{
    struct ConfigInfo
    {
        //业务名称
        0 require string appname;
        //服务名称
        1 require string servername;
        //配置文件名称
        2 require string filename;
        //是否只获取应用配置,默认为false,如果为true则servername可以为空
        3 require bool bAppOnly=false;
        //服务所在节点(ip)
        4 optional string host;
        //set分组名称
        5 optional string setdivision;
    };
    
    struct GetConfigListInfo
    {
        //业务名称
        0 require string appname;
        //服务名称
        1 optional string servername;
        //是否只获取应用配置,默认为false,如果为true只拉取应用级别的列表，其它级别无效
        2 optional bool bAppOnly=false;
        //服务所在节点(ip)，要机器级别的，请赋值
        3 optional string host="";
        //set分组名称,需要拉取set级别的，请赋值
        4 optional string setdivision="";
        //容器级别，需要拉取容器级别的，请赋值
        5 optional string containername="";
    };
    
    /**
     * config obj to load server's system config.
     **/
    interface Config
    {
        /**
         * 读取配置文件列表
         * @param app, app name
         * @param server, server name
         * @param vf, config file name
         **/
        int ListConfig(string app, string server, out vector<string> vf);

        /**
         * 读取配置文件
         * @param app, app name
         * @param server, server name
         * @param filename, config file name
           * @param config, 配置文件内容
         **/
        int loadConfig(string app, string server, string filename, out string config);

        /**
         * 根据host读取文件
         * @param appSerever, app.server
         * @param filename, config file name
         * @param host, ip
         * @param config, 配置文件内容
         **/
        int loadConfigByHost(string appServerName, string filename, string host, out string config);

        /**
         * 检查配置文件是否服务TC_Config格式
         * @param appSerever, app.server
         * @param filename, config file name
         * @param host, ip
         * @param result, 提示
         * @return int 0: 合法, -1:非法
         **/
        int checkConfig(string appServerName, string filename, string host, out string result);

        /**
         * 读取服务所在节点的配置文件列表
         * 
         * @param configInfo, ConfigInfo 配置文件信息，如果没有set分组信息，请设置setdivision为空""
         * @param vf, config file name
         * @return int 0: 成功, -1:失败
         **/
        int ListConfigByInfo(ConfigInfo configInfo, out vector<string> vf);

        /**
         * 读取配置文件
         * @param configInfo, ConfigInfo 配置文件信息
         * @param config, 配置文件内容
         * @return int 0: 成功, -1:失败
         **/
        int loadConfigByInfo(ConfigInfo configInfo, out string config);

        /**
         * 检查配置文件是否符合TC_Config格式
         * @param configInfo, ConfigInfo 配置文件信息
         * @param result, 提示
         * @return int 0: 合法, -1:非法
         **/
        int checkConfigByInfo(ConfigInfo configInfo, out string result);

        /**
         * 获取服务的所有配置文件列表，
         * @param configInfo 支持拉取应用配置列表，服务配置列表，机器配置列表和容器配置列表
         * @param[out] vf  获取到的文件名称列表
         * @return int 0: 成功, -1:失败
         **/
        int ListAllConfigByInfo(GetConfigListInfo configInfo, out vector<string> vf);
        
    };
};